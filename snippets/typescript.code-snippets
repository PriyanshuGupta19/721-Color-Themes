{
    "TypeScript 1": {
        "prefix": "!_t1",
        "body": [
    "const sum = (a: number, b: number = a / 2): number => a + b;",
    "",
    "// Example usage:",
    "console.log(sum(10)); // Outputs 15 (10 + 10/2)",
    "console.log(sum(10, 20)); // Outputs 30 (10 + 20)",
    "",
    "// npm install --save-dev typescript",
    "// npx tsc --init",
    "// npx tsc",
    "// nodemon index.js   (.js)",
    "",
    "",
    "// Optional and Default Parameters",
    "function greet(name: string, greeting: string = \"Hello\"): string {",
    "    return `${greeting}, ${name}!`;",
    "}",
    "",
    "console.log(greet(\"John\"));  // Output: Hello, John!",
    "",
    "",
    "",
    "// Function Overloading",
    "function getLength(value: string): number;",
    "function getLength(value: any[]): number;",
    "",
    "function getLength(value: any): number {",
    "    return value.length;",
    "}",
    "",
    "console.log(getLength(\"hello\"));  // Output: 5",
    "console.log(getLength([1, 2, 3]));  // Output: 3",
    "",
    "",
    "",
    "// Basic Class",
    "class Person {",
    "    name: string;",
    "    age: number;",
    "",
    "    constructor(name: string, age: number) {",
    "        this.name = name;",
    "        this.age = age;",
    "    }",
    "",
    "    greet(): void {",
    "        console.log(`Hello, my name is ${this.name} and I am ${this.age} years old.`);",
    "    }",
    "}",
    "",
    "let person1 = new Person(\"Alice\", 25);",
    "person1.greet();  // Output: Hello, my name is Alice and I am 25 years old.",
    "",
    "",
    "",
    "// Public Private Protected",
    "class Employee {",
    "    public name: string;",
    "    private salary: number;",
    "",
    "    constructor(name: string, salary: number) {",
    "        this.name = name;",
    "        this.salary = salary;",
    "    }",
    "",
    "    showSalary(): void {",
    "        console.log(`Salary of ${this.name} is ${this.salary}`);",
    "    }",
    "}",
    "",
    "let emp = new Employee(\"Bob\", 50000);",
    "emp.showSalary();  // OK: Salary of Bob is 50000",
    "// emp.salary;  // Error: Property 'salary' is private",
    "",
    "",
    "",
    "// Inheritance (Extends)",
    "class Person {",
    "    constructor(public name: string) {}",
    "}",
    "",
    "class Employee extends Person {",
    "    constructor(name: string, public position: string) {",
    "        super(name);",
    "    }",
    "",
    "    displayPosition(): void {",
    "        console.log(`${this.name} works as a ${this.position}`);",
    "    }",
    "}",
    "",
    "let emp1 = new Employee(\"John\", \"Manager\");",
    "emp1.displayPosition();  // Output: John works as a Manager",
    "",
    "",
    "",
    "// Abstract Class",
    "abstract class Vehicle {",
    "    abstract drive(): void;",
    "",
    "    start(): void {",
    "        console.log(\"Vehicle starting...\");",
    "    }",
    "}",
    "",
    "class Car extends Vehicle {",
    "    drive(): void {",
    "        console.log(\"Car driving...\");",
    "    }",
    "}",
    "",
    "let myCar = new Car();",
    "myCar.start();  // Output: Vehicle starting...",
    "myCar.drive();  // Output: Car driving..."
  ],
        "description": "t1"
    },

    "TypeScript 2": {
        "prefix": "!_t2",
        "body": [
    "// npm install --save-dev typescript",
    "// npx tsc --init",
    "// npx tsc",
    "// nodemon index.js   (.js)",
    "",
    "// Project: Simple User Management with TypeScript",
    "enum Role {",
    "    Admin = \"Admin\",",
    "    User = \"User\",",
    "    Guest = \"Guest\"",
    "}",
    "class User {",
    "    constructor(",
    "        public name: string,",
    "        public age: number,",
    "        public role: Role",
    "    ) {}",
    "}",
    "class UserManager {",
    "    private users: User[] = [];",
    "",
    "    addUser(user: User): void {",
    "        this.users.push(user);",
    "    }",
    "",
    "    listUsers(): void {",
    "        this.users.forEach(user => {",
    "            console.log(`${user.name} (${user.age} years old) - Role: ${user.role}`);",
    "        });",
    "    }",
    "",
    "    getAverageAge(): number {",
    "        const totalAge = this.users.reduce((sum, user) => sum + user.age, 0);",
    "        return totalAge / this.users.length;",
    "    }",
    "}",
    "const userManager = new UserManager();",
    "",
    "userManager.addUser(new User(\"Alice\", 25, Role.User));",
    "userManager.addUser(new User(\"Bob\", 30, Role.Admin));",
    "userManager.addUser(new User(\"Charlie\", 35, Role.Guest));",
    "",
    "userManager.listUsers();",
    "",
    "console.log(`Average Age: ${userManager.getAverageAge()}`);",
    "",
    "",
    "",
    "// TypeScript: Classes, Constructors, and Interfaces",
    "// Create an Interface for Student",
    "interface Student {",
    "    id: number;",
    "    name: string;",
    "    age: number;",
    "    enroll(): string;",
    "}",
    "// Create a Class that Implements the Interface",
    "class HighSchoolStudent implements Student {",
    "    id: number;",
    "    name: string;",
    "    age: number;",
    "",
    "    constructor(id: number, name: string, age: number) {",
    "        this.id = id;",
    "        this.name = name;",
    "        this.age = age;",
    "    }",
    "",
    "    enroll(): string {",
    "        return `${this.name} has been enrolled.`;",
    "    }",
    "}",
    "",
    "const student1 = new HighSchoolStudent(1, 'John Doe', 15);",
    "console.log(student1.enroll());",
    "",
    "// Extend the class",
    "class CollegeStudent extends HighSchoolStudent {",
    "    course: string;",
    "",
    "    constructor(id: number, name: string, age: number, course: string) {",
    "        super(id, name, age);",
    "        this.course = course;",
    "    }",
    "",
    "    enroll(): string {",
    "        return `${this.name} has been enrolled in ${this.course}.`;",
    "    }",
    "}",
    "",
    "const student2 = new CollegeStudent(2, 'Jane Smith', 19, 'Computer Science');",
    "console.log(student2.enroll());"
  ],
        "description": "t2"
    },

    "login-signup-redux": {
        "prefix": "!_login-singup-redux",
        "body": [
  "// Setup Commands",
  "// npm install @reduxjs/toolkit react-redux",
  "// npm install react-router-dom",

  "// Folder Structure",
  "// src/",
  "// ├── app/",
  "// │   └── store.ts",
  "// ├── features/",
  "// │   └── auth/",
  "// │       ├── authSlice.ts",
  "// │       ├── Login.tsx",
  "// │       └── SignUp.tsx",
  "// ├── pages/",
  "// │   └── Home.tsx",
  "// ├── App.tsx",
  "// └── main.tsx",

  "// store.ts",
  "import { configureStore } from '@reduxjs/toolkit';",
  "import authReducer from '../features/auth/authSlice';",
  "",
  "export const store = configureStore({",
  "  reducer: {",
  "    auth: authReducer,",
  "  },",
  "});",
  "",
  "export type RootState = ReturnType<typeof store.getState>;",
  "export type AppDispatch = typeof store.dispatch;",

  "// authSlice.ts",
  "import { createSlice } from '@reduxjs/toolkit';",
  "",
  "interface AuthState {",
  "  email: string;",
  "  isAuthenticated: boolean;",
  "}",
  "",
  "const initialState: AuthState = {",
  "  email: '',",
  "  isAuthenticated: false,",
  "};",
  "",
  "const authSlice = createSlice({",
  "  name: 'auth',",
  "  initialState,",
  "  reducers: {",
  "    login: (state, action) => {",
  "      state.email = action.payload.email;",
  "      state.isAuthenticated = true;",
  "    },",
  "    logout: (state) => {",
  "      state.email = '';",
  "      state.isAuthenticated = false;",
  "    },",
  "  },",
  "});",
  "",
  "export const { login, logout } = authSlice.actions;",
  "export default authSlice.reducer;",

  "// SignUp.tsx",
  "import { useState } from 'react';",
  "",
  "const SignUp = () => {",
  "  const [email, setEmail] = useState('');",
  "  const [password, setPassword] = useState('');",
  "",
  "  const handleSubmit = (e: React.FormEvent) => {",
  "    e.preventDefault();",
  "    const user = { email, password };",
  "    const stored = JSON.parse(localStorage.getItem('users') || '[]');",
  "    stored.push(user);",
  "    localStorage.setItem('users', JSON.stringify(stored));",
  "    alert('User registered. Please login.');",
  "    setEmail('');",
  "    setPassword('');",
  "  };",
  "",
  "  return (",
  "    <div className=\"min-h-screen flex items-center justify-center\">",
  "      <form onSubmit={handleSubmit} className=\"bg-white p-6 rounded shadow-md w-full max-w-sm\">",
  "        <h2 className=\"text-xl font-bold mb-4\">Sign Up</h2>",
  "        <input type=\"email\" placeholder=\"Email\" className=\"w-full p-2 mb-3 border rounded\"",
  "          value={email} onChange={(e) => setEmail(e.target.value)} required />",
  "        <input type=\"password\" placeholder=\"Password\" className=\"w-full p-2 mb-4 border rounded\"",
  "          value={password} onChange={(e) => setPassword(e.target.value)} required />",
  "        <button type=\"submit\" className=\"w-full bg-blue-500 text-white py-2 rounded hover:bg-blue-600\">",
  "          Sign Up",
  "        </button>",
  "      </form>",
  "    </div>",
  "  );",
  "};",
  "",
  "export default SignUp;",

  "// Login.tsx",
  "import { useState } from 'react';",
  "import { useDispatch } from 'react-redux';",
  "import { login } from './authSlice';",
  "import { useNavigate } from 'react-router-dom';",
  "",
  "const Login = () => {",
  "  const [email, setEmail] = useState('');",
  "  const [password, setPassword] = useState('');",
  "  const dispatch = useDispatch();",
  "  const navigate = useNavigate();",
  "",
  "  const handleSubmit = (e: React.FormEvent) => {",
  "    e.preventDefault();",
  "    const users = JSON.parse(localStorage.getItem('users') || '[]');",
  "    const userFound = users.find((u: any) => u.email === email && u.password === password);",
  "",
  "    if (userFound) {",
  "      dispatch(login({ email }));",
  "      navigate('/home');",
  "    } else {",
  "      alert('Invalid credentials.');",
  "    }",
  "  };",
  "",
  "  return (",
  "    <div className=\"min-h-screen flex items-center justify-center\">",
  "      <form onSubmit={handleSubmit} className=\"bg-white p-6 rounded shadow-md w-full max-w-sm\">",
  "        <h2 className=\"text-xl font-bold mb-4\">Login</h2>",
  "        <input type=\"email\" placeholder=\"Email\" className=\"w-full p-2 mb-3 border rounded\"",
  "          value={email} onChange={(e) => setEmail(e.target.value)} required />",
  "        <input type=\"password\" placeholder=\"Password\" className=\"w-full p-2 mb-4 border rounded\"",
  "          value={password} onChange={(e) => setPassword(e.target.value)} required />",
  "        <button type=\"submit\" className=\"w-full bg-green-500 text-white py-2 rounded hover:bg-green-600\">",
  "          Login",
  "        </button>",
  "      </form>",
  "    </div>",
  "  );",
  "};",
  "",
  "export default Login;",

  "// Home.tsx",
  "import { useSelector, useDispatch } from 'react-redux';",
  "import { RootState } from '../app/store';",
  "import { logout } from '../features/auth/authSlice';",
  "import { useNavigate } from 'react-router-dom';",
  "",
  "const Home = () => {",
  "  const email = useSelector((state: RootState) => state.auth.email);",
  "  const dispatch = useDispatch();",
  "  const navigate = useNavigate();",
  "",
  "  return (",
  "    <div className=\"min-h-screen flex flex-col items-center justify-center\">",
  "      <h1 className=\"text-2xl font-bold mb-4\">Welcome, {email}!</h1>",
  "      <button onClick={() => {",
  "        dispatch(logout());",
  "        navigate('/');",
  "      }} className=\"bg-red-500 text-white px-4 py-2 rounded hover:bg-red-600\">",
  "        Logout",
  "      </button>",
  "    </div>",
  "  );",
  "};",
  "",
  "export default Home;",

  "// App.tsx",
  "import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';",
  "import SignUp from './features/auth/SignUp';",
  "import Login from './features/auth/Login';",
  "import Home from './pages/Home';",
  "",
  "const App = () => {",
  "  return (",
  "    <Router>",
  "      <Routes>",
  "        <Route path=\"/\" element={<Login />} />",
  "        <Route path=\"/signup\" element={<SignUp />} />",
  "        <Route path=\"/home\" element={<Home />} />",
  "      </Routes>",
  "    </Router>",
  "  );",
  "};",
  "",
  "export default App;",

  "// main.tsx",
  "import React from 'react';",
  "import ReactDOM from 'react-dom/client';",
  "import './index.css';",
  "import App from './App';",
  "import { Provider } from 'react-redux';",
  "import { store } from './app/store';",
  "",
  "ReactDOM.createRoot(document.getElementById('root')!).render(",
  "  <React.StrictMode>",
  "    <Provider store={store}>",
  "      <App />",
  "    </Provider>",
  "  </React.StrictMode>",
  ");"
],
"description": "login-signup-redux"
    }
}

