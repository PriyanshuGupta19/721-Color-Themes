{
    "TypeScript 1": {
        "prefix": "!_t1",
        "body": [
            "const sum = (a: number, b: number = a / 2): number => a + b;",
            "",
            "// Example usage:",
            "console.log(sum(10)); // Outputs 15 (10 + 10/2)",
            "console.log(sum(10, 20)); // Outputs 30 (10 + 20)",
            "",
            "// npm install --save-dev typescript",
            "// npx tsc --init",
            "// npx tsc",
            "// nodemon index.js   (.js)",
            "",
            "",
            "// Optional and Default Parameters",
            "function greet(name: string, greeting: string = \"Hello\"): string {",
            "    return `${greeting}, ${name}!`;",
            "}",
            "",
            "console.log(greet(\"John\"));  // Output: Hello, John!",
            "",
            "",
            "",
            "// Function Overloading",
            "function getLength(value: string): number;",
            "function getLength(value: any[]): number;",
            "",
            "function getLength(value: any): number {",
            "    return value.length;",
            "}",
            "",
            "console.log(getLength(\"hello\"));  // Output: 5",
            "console.log(getLength([1, 2, 3]));  // Output: 3",
            "",
            "",
            "",
            "// Basic Class",
            "class Person {",
            "    name: string;",
            "    age: number;",
            "",
            "    constructor(name: string, age: number) {",
            "        this.name = name;",
            "        this.age = age;",
            "    }",
            "",
            "    greet(): void {",
            "        console.log(`Hello, my name is ${this.name} and I am ${this.age} years old.`);",
            "    }",
            "}",
            "",
            "let person1 = new Person(\"Alice\", 25);",
            "person1.greet();  // Output: Hello, my name is Alice and I am 25 years old.",
            "",
            "",
            "",
            "// Public Private Protected",
            "class Employee {",
            "    public name: string;",
            "    private salary: number;",
            "",
            "    constructor(name: string, salary: number) {",
            "        this.name = name;",
            "        this.salary = salary;",
            "    }",
            "",
            "    showSalary(): void {",
            "        console.log(`Salary of ${this.name} is ${this.salary}`);",
            "    }",
            "}",
            "",
            "let emp = new Employee(\"Bob\", 50000);",
            "emp.showSalary();  // OK: Salary of Bob is 50000",
            "// emp.salary;  // Error: Property 'salary' is private",
            "",
            "",
            "",
            "// Inheritance (Extends)",
            "class Person {",
            "    constructor(public name: string) {}",
            "}",
            "",
            "class Employee extends Person {",
            "    constructor(name: string, public position: string) {",
            "        super(name);",
            "    }",
            "",
            "    displayPosition(): void {",
            "        console.log(`${this.name} works as a ${this.position}`);",
            "    }",
            "}",
            "",
            "let emp1 = new Employee(\"John\", \"Manager\");",
            "emp1.displayPosition();  // Output: John works as a Manager",
            "",
            "",
            "",
            "// Abstract Class",
            "abstract class Vehicle {",
            "    abstract drive(): void;",
            "",
            "    start(): void {",
            "        console.log(\"Vehicle starting...\");",
            "    }",
            "}",
            "",
            "class Car extends Vehicle {",
            "    drive(): void {",
            "        console.log(\"Car driving...\");",
            "    }",
            "}",
            "",
            "let myCar = new Car();",
            "myCar.start();  // Output: Vehicle starting...",
            "myCar.drive();  // Output: Car driving..."
        ],
        "description": "t1"
    },
    "TypeScript 2": {
        "prefix": "!_t2",
        "body": [
            "// npm install --save-dev typescript",
            "// npx tsc --init",
            "// npx tsc",
            "// nodemon index.js   (.js)",
            "",
            "// Project: Simple User Management with TypeScript",
            "enum Role {",
            "    Admin = \"Admin\",",
            "    User = \"User\",",
            "    Guest = \"Guest\"",
            "}",
            "class User {",
            "    constructor(",
            "        public name: string,",
            "        public age: number,",
            "        public role: Role",
            "    ) {}",
            "}",
            "class UserManager {",
            "    private users: User[] = [];",
            "",
            "    addUser(user: User): void {",
            "        this.users.push(user);",
            "    }",
            "",
            "    listUsers(): void {",
            "        this.users.forEach(user => {",
            "            console.log(`${user.name} (${user.age} years old) - Role: ${user.role}`);",
            "        });",
            "    }",
            "",
            "    getAverageAge(): number {",
            "        const totalAge = this.users.reduce((sum, user) => sum + user.age, 0);",
            "        return totalAge / this.users.length;",
            "    }",
            "}",
            "const userManager = new UserManager();",
            "",
            "userManager.addUser(new User(\"Alice\", 25, Role.User));",
            "userManager.addUser(new User(\"Bob\", 30, Role.Admin));",
            "userManager.addUser(new User(\"Charlie\", 35, Role.Guest));",
            "",
            "userManager.listUsers();",
            "",
            "console.log(`Average Age: ${userManager.getAverageAge()}`);",
            "",
            "",
            "",
            "// TypeScript: Classes, Constructors, and Interfaces",
            "// Create an Interface for Student",
            "interface Student {",
            "    id: number;",
            "    name: string;",
            "    age: number;",
            "    enroll(): string;",
            "}",
            "// Create a Class that Implements the Interface",
            "class HighSchoolStudent implements Student {",
            "    id: number;",
            "    name: string;",
            "    age: number;",
            "",
            "    constructor(id: number, name: string, age: number) {",
            "        this.id = id;",
            "        this.name = name;",
            "        this.age = age;",
            "    }",
            "",
            "    enroll(): string {",
            "        return `${this.name} has been enrolled.`;",
            "    }",
            "}",
            "",
            "const student1 = new HighSchoolStudent(1, 'John Doe', 15);",
            "console.log(student1.enroll());",
            "",
            "// Extend the class",
            "class CollegeStudent extends HighSchoolStudent {",
            "    course: string;",
            "",
            "    constructor(id: number, name: string, age: number, course: string) {",
            "        super(id, name, age);",
            "        this.course = course;",
            "    }",
            "",
            "    enroll(): string {",
            "        return `${this.name} has been enrolled in ${this.course}.`;",
            "    }",
            "}",
            "",
            "const student2 = new CollegeStudent(2, 'Jane Smith', 19, 'Computer Science');",
            "console.log(student2.enroll());"
        ],
        "description": "t2"
    },
    "login-signup-redux": {
        "prefix": "!_login-singup-redux",
        "body": [
            "// Setup Commands",
            "// npm install @reduxjs/toolkit react-redux",
            "// npm install react-router-dom",
            "// Folder Structure",
            "// src/",
            "// ├── app/",
            "// │   └── store.ts",
            "// ├── features/",
            "// │   └── auth/",
            "// │       ├── authSlice.ts",
            "// │       ├── Login.tsx",
            "// │       └── SignUp.tsx",
            "// ├── pages/",
            "// │   └── Home.tsx",
            "// ├── App.tsx",
            "// └── main.tsx",
            "// store.ts",
            "import { configureStore } from '@reduxjs/toolkit';",
            "import authReducer from '../features/auth/authSlice';",
            "",
            "export const store = configureStore({",
            "  reducer: {",
            "    auth: authReducer,",
            "  },",
            "});",
            "",
            "export type RootState = ReturnType<typeof store.getState>;",
            "export type AppDispatch = typeof store.dispatch;",
            "// authSlice.ts",
            "import { createSlice } from '@reduxjs/toolkit';",
            "",
            "interface AuthState {",
            "  email: string;",
            "  isAuthenticated: boolean;",
            "}",
            "",
            "const initialState: AuthState = {",
            "  email: '',",
            "  isAuthenticated: false,",
            "};",
            "",
            "const authSlice = createSlice({",
            "  name: 'auth',",
            "  initialState,",
            "  reducers: {",
            "    login: (state, action) => {",
            "      state.email = action.payload.email;",
            "      state.isAuthenticated = true;",
            "    },",
            "    logout: (state) => {",
            "      state.email = '';",
            "      state.isAuthenticated = false;",
            "    },",
            "  },",
            "});",
            "",
            "export const { login, logout } = authSlice.actions;",
            "export default authSlice.reducer;",
            "// SignUp.tsx",
            "import { useState } from 'react';",
            "",
            "const SignUp = () => {",
            "  const [email, setEmail] = useState('');",
            "  const [password, setPassword] = useState('');",
            "",
            "  const handleSubmit = (e: React.FormEvent) => {",
            "    e.preventDefault();",
            "    const user = { email, password };",
            "    const stored = JSON.parse(localStorage.getItem('users') || '[]');",
            "    stored.push(user);",
            "    localStorage.setItem('users', JSON.stringify(stored));",
            "    alert('User registered. Please login.');",
            "    setEmail('');",
            "    setPassword('');",
            "  };",
            "",
            "  return (",
            "    <div className=\"min-h-screen flex items-center justify-center\">",
            "      <form onSubmit={handleSubmit} className=\"bg-white p-6 rounded shadow-md w-full max-w-sm\">",
            "        <h2 className=\"text-xl font-bold mb-4\">Sign Up</h2>",
            "        <input type=\"email\" placeholder=\"Email\" className=\"w-full p-2 mb-3 border rounded\"",
            "          value={email} onChange={(e) => setEmail(e.target.value)} required />",
            "        <input type=\"password\" placeholder=\"Password\" className=\"w-full p-2 mb-4 border rounded\"",
            "          value={password} onChange={(e) => setPassword(e.target.value)} required />",
            "        <button type=\"submit\" className=\"w-full bg-blue-500 text-white py-2 rounded hover:bg-blue-600\">",
            "          Sign Up",
            "        </button>",
            "      </form>",
            "    </div>",
            "  );",
            "};",
            "",
            "export default SignUp;",
            "// Login.tsx",
            "import { useState } from 'react';",
            "import { useDispatch } from 'react-redux';",
            "import { login } from './authSlice';",
            "import { useNavigate } from 'react-router-dom';",
            "",
            "const Login = () => {",
            "  const [email, setEmail] = useState('');",
            "  const [password, setPassword] = useState('');",
            "  const dispatch = useDispatch();",
            "  const navigate = useNavigate();",
            "",
            "  const handleSubmit = (e: React.FormEvent) => {",
            "    e.preventDefault();",
            "    const users = JSON.parse(localStorage.getItem('users') || '[]');",
            "    const userFound = users.find((u: any) => u.email === email && u.password === password);",
            "",
            "    if (userFound) {",
            "      dispatch(login({ email }));",
            "      navigate('/home');",
            "    } else {",
            "      alert('Invalid credentials.');",
            "    }",
            "  };",
            "",
            "  return (",
            "    <div className=\"min-h-screen flex items-center justify-center\">",
            "      <form onSubmit={handleSubmit} className=\"bg-white p-6 rounded shadow-md w-full max-w-sm\">",
            "        <h2 className=\"text-xl font-bold mb-4\">Login</h2>",
            "        <input type=\"email\" placeholder=\"Email\" className=\"w-full p-2 mb-3 border rounded\"",
            "          value={email} onChange={(e) => setEmail(e.target.value)} required />",
            "        <input type=\"password\" placeholder=\"Password\" className=\"w-full p-2 mb-4 border rounded\"",
            "          value={password} onChange={(e) => setPassword(e.target.value)} required />",
            "        <button type=\"submit\" className=\"w-full bg-green-500 text-white py-2 rounded hover:bg-green-600\">",
            "          Login",
            "        </button>",
            "      </form>",
            "    </div>",
            "  );",
            "};",
            "",
            "export default Login;",
            "// Home.tsx",
            "import { useSelector, useDispatch } from 'react-redux';",
            "import { RootState } from '../app/store';",
            "import { logout } from '../features/auth/authSlice';",
            "import { useNavigate } from 'react-router-dom';",
            "",
            "const Home = () => {",
            "  const email = useSelector((state: RootState) => state.auth.email);",
            "  const dispatch = useDispatch();",
            "  const navigate = useNavigate();",
            "",
            "  return (",
            "    <div className=\"min-h-screen flex flex-col items-center justify-center\">",
            "      <h1 className=\"text-2xl font-bold mb-4\">Welcome, {email}!</h1>",
            "      <button onClick={() => {",
            "        dispatch(logout());",
            "        navigate('/');",
            "      }} className=\"bg-red-500 text-white px-4 py-2 rounded hover:bg-red-600\">",
            "        Logout",
            "      </button>",
            "    </div>",
            "  );",
            "};",
            "",
            "export default Home;",
            "// App.tsx",
            "import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';",
            "import SignUp from './features/auth/SignUp';",
            "import Login from './features/auth/Login';",
            "import Home from './pages/Home';",
            "",
            "const App = () => {",
            "  return (",
            "    <Router>",
            "      <Routes>",
            "        <Route path=\"/\" element={<Login />} />",
            "        <Route path=\"/signup\" element={<SignUp />} />",
            "        <Route path=\"/home\" element={<Home />} />",
            "      </Routes>",
            "    </Router>",
            "  );",
            "};",
            "",
            "export default App;",
            "// main.tsx",
            "import React from 'react';",
            "import ReactDOM from 'react-dom/client';",
            "import './index.css';",
            "import App from './App';",
            "import { Provider } from 'react-redux';",
            "import { store } from './app/store';",
            "",
            "ReactDOM.createRoot(document.getElementById('root')!).render(",
            "  <React.StrictMode>",
            "    <Provider store={store}>",
            "      <App />",
            "    </Provider>",
            "  </React.StrictMode>",
            ");"
        ],
        "description": "login-signup-redux"
    },
    "login-signup-context": {
        "prefix": "!_login-signup-context",
        "body": [
            "// Setup Commands",
            "// npm install react-router-dom",
            "// Folder Structure",
            "// src/",
            "// ├── context/",
            "// │   └── AuthContext.tsx",
            "// ├── pages/",
            "// │   ├── Login.tsx",
            "// │   ├── SignUp.tsx",
            "// │   └── Home.tsx",
            "// ├── App.tsx",
            "// └── main.tsx",
            "// AuthContext.tsx",
            "import { createContext, useContext, useState, ReactNode } from 'react';",
            "import { useNavigate } from 'react-router-dom';",
            "",
            "interface User {",
            "  email: string;",
            "  password: string;",
            "}",
            "",
            "interface AuthContextType {",
            "  user: string | null;",
            "  login: (email: string, password: string) => boolean;",
            "  signup: (email: string, password: string) => void;",
            "  logout: () => void;",
            "}",
            "",
            "const AuthContext = createContext<AuthContextType | null>(null);",
            "",
            "export const AuthProvider = ({ children }: { children: ReactNode }) => {",
            "  const [user, setUser] = useState<string | null>(null);",
            "  const navigate = useNavigate();",
            "",
            "  const login = (email: string, password: string): boolean => {",
            "    const users: User[] = JSON.parse(localStorage.getItem('users') || '[]');",
            "    const found = users.find(u => u.email === email && u.password === password);",
            "",
            "    if (found) {",
            "      setUser(email);",
            "      return true;",
            "    }",
            "    return false;",
            "  };",
            "",
            "  const signup = (email: string, password: string) => {",
            "    const users: User[] = JSON.parse(localStorage.getItem('users') || '[]');",
            "    users.push({ email, password });",
            "    localStorage.setItem('users', JSON.stringify(users));",
            "    alert('User registered. Please login.');",
            "    navigate('/');",
            "  };",
            "",
            "  const logout = () => {",
            "    setUser(null);",
            "    navigate('/');",
            "  };",
            "",
            "  return (",
            "    <AuthContext.Provider value={{ user, login, signup, logout }}>",
            "      {children}",
            "    </AuthContext.Provider>",
            "  );",
            "};",
            "",
            "export const useAuth = () => useContext(AuthContext)!;",
            "// SignUp.tsx",
            "import { useState } from 'react';",
            "import { useAuth } from '../context/AuthContext';",
            "",
            "const SignUp = () => {",
            "  const [email, setEmail] = useState('');",
            "  const [password, setPassword] = useState('');",
            "  const { signup } = useAuth();",
            "",
            "  const handleSubmit = (e: React.FormEvent) => {",
            "    e.preventDefault();",
            "    signup(email, password);",
            "  };",
            "",
            "  return (",
            "    <div className=\"flex min-h-screen items-center justify-center\">",
            "      <form onSubmit={handleSubmit} className=\"bg-white p-6 rounded shadow-md w-full max-w-sm\">",
            "        <h2 className=\"text-xl font-bold mb-4\">Sign Up</h2>",
            "        <input type=\"email\" placeholder=\"Email\" className=\"w-full p-2 mb-3 border rounded\"",
            "          value={email} onChange={(e) => setEmail(e.target.value)} required />",
            "        <input type=\"password\" placeholder=\"Password\" className=\"w-full p-2 mb-4 border rounded\"",
            "          value={password} onChange={(e) => setPassword(e.target.value)} required />",
            "        <button type=\"submit\" className=\"w-full bg-blue-500 text-white py-2 rounded hover:bg-blue-600\">",
            "          Sign Up",
            "        </button>",
            "      </form>",
            "    </div>",
            "  );",
            "};",
            "",
            "export default SignUp;",
            "// Login.tsx",
            "import { useState } from 'react';",
            "import { useNavigate } from 'react-router-dom';",
            "import { useAuth } from '../context/AuthContext';",
            "",
            "const Login = () => {",
            "  const [email, setEmail] = useState('');",
            "  const [password, setPassword] = useState('');",
            "  const { login } = useAuth();",
            "  const navigate = useNavigate();",
            "",
            "  const handleSubmit = (e: React.FormEvent) => {",
            "    e.preventDefault();",
            "    const success = login(email, password);",
            "    if (success) {",
            "      navigate('/home');",
            "    } else {",
            "      alert('Invalid credentials.');",
            "    }",
            "  };",
            "",
            "  return (",
            "    <div className=\"flex min-h-screen items-center justify-center\">",
            "      <form onSubmit={handleSubmit} className=\"bg-white p-6 rounded shadow-md w-full max-w-sm\">",
            "        <h2 className=\"text-xl font-bold mb-4\">Login</h2>",
            "        <input type=\"email\" placeholder=\"Email\" className=\"w-full p-2 mb-3 border rounded\"",
            "          value={email} onChange={(e) => setEmail(e.target.value)} required />",
            "        <input type=\"password\" placeholder=\"Password\" className=\"w-full p-2 mb-4 border rounded\"",
            "          value={password} onChange={(e) => setPassword(e.target.value)} required />",
            "        <button type=\"submit\" className=\"w-full bg-green-500 text-white py-2 rounded hover:bg-green-600\">",
            "          Login",
            "        </button>",
            "      </form>",
            "    </div>",
            "  );",
            "};",
            "",
            "export default Login;",
            "// Home.tsx",
            "import { useAuth } from '../context/AuthContext';",
            "",
            "const Home = () => {",
            "  const { user, logout } = useAuth();",
            "",
            "  return (",
            "    <div className=\"min-h-screen flex flex-col items-center justify-center\">",
            "      <h1 className=\"text-2xl font-bold mb-4\">Welcome, {user}!</h1>",
            "      <button onClick={logout} className=\"bg-red-500 text-white px-4 py-2 rounded hover:bg-red-600\">",
            "        Logout",
            "      </button>",
            "    </div>",
            "  );",
            "};",
            "",
            "export default Home;",
            "// App.tsx",
            "import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';",
            "import Login from './pages/Login';",
            "import SignUp from './pages/SignUp';",
            "import Home from './pages/Home';",
            "import { AuthProvider } from './context/AuthContext';",
            "",
            "const App = () => {",
            "  return (",
            "    <Router>",
            "      <AuthProvider>",
            "        <Routes>",
            "          <Route path=\"/\" element={<Login />} />",
            "          <Route path=\"/signup\" element={<SignUp />} />",
            "          <Route path=\"/home\" element={<Home />} />",
            "        </Routes>",
            "      </AuthProvider>",
            "    </Router>",
            "  );",
            "};",
            "",
            "export default App;",
            "// main.tsx",
            "import React from 'react';",
            "import ReactDOM from 'react-dom/client';",
            "import './index.css';",
            "import App from './App';",
            "",
            "ReactDOM.createRoot(document.getElementById('root')!).render(",
            "  <React.StrictMode>",
            "    <App />",
            "  </React.StrictMode>",
            ");"
        ],
        "description": "login-signup-context"
    },
    "req-res-api": {
        "prefix": "!_req-res-api",
        "body": [
  "// App.tsx",
  "import { useEffect, useState } from \"react\";",

  "",
  "// User Interface",
  "interface User {",
  "  id: number;",
  "  name: string;",
  "  username: string;",
  "  email: string;",
  "  address: {",
  "    street: string;",
  "    suite: string;",
  "    city: string;",
  "    zipcode: string;",
  "  };",
  "  phone: string;",
  "  website: string;",
  "  company: {",
  "    name: string;",
  "    catchPhrase: string;",
  "    bs: string;",
  "  };",
  "}",

  "",
  "// API URL",
  "const API = \"https://jsonplaceholder.typicode.com/users\";",

  "",
  "// App Component",
  "const App = () => {",
  "  const [users, setUsers] = useState<User[]>([]);",
  "  const [searchTerm, setSearchTerm] = useState(\"\");",

  "  const fetchUsers = async (url: string) => {",
  "    try {",
  "      const res = await fetch(url);",
  "      const data = await res.json();",
  "      if (data.length > 0) {",
  "        setUsers(data);",
  "      }",
  "    } catch (e) {",
  "      console.error(e);",
  "    }",
  "  };",

  "  useEffect(() => {",
  "    fetchUsers(API);",
  "  }, []);",

  "  const filteredUsers = users.filter(user =>",
  "    user.name.toLowerCase().includes(searchTerm.toLowerCase()) ||",
  "    user.email.toLowerCase().includes(searchTerm.toLowerCase()) ||",
  "    user.address.city.toLowerCase().includes(searchTerm.toLowerCase()) ||",
  "    user.username.toLowerCase().includes(searchTerm.toLowerCase())",
  "  );",

  "  return (",
  "    <div className=\"container mx-auto p-4\">",
  "      <h1 className=\"text-3xl text-black text-center mb-4\">React Table</h1>",

  "      {/* Search Input */}",
  "      <div className=\"mb-4\">",
  "        <input",
  "          type=\"text\"",
  "          placeholder=\"Search by name, email, or city...\"",
  "          className=\"w-full p-2 border rounded\"",
  "          value={searchTerm}",
  "          onChange={(e) => setSearchTerm(e.target.value)}",
  "        />",
  "      </div>",

  "      <table className=\"min-w-full border\">",
  "        <thead>",
  "          <tr className=\"bg-gray-100\">",
  "            <th className=\"py-2 px-4 border\">Name</th>",
  "            <th className=\"py-2 px-4 border\">Username</th>",
  "            <th className=\"py-2 px-4 border\">Email</th>",
  "            <th className=\"py-2 px-4 border\">City</th>",
  "            <th className=\"py-2 px-4 border\">Phone</th>",
  "            <th className=\"py-2 px-4 border\">Website</th>",
  "            <th className=\"py-2 px-4 border\">Company</th>",
  "          </tr>",
  "        </thead>",
  "        <tbody>",
  "          {filteredUsers.length > 0 ? (",
  "            filteredUsers.map((user) => (",
  "              <tr key={user.id} className=\"hover:bg-gray-50\">",
  "                <td className=\"py-2 px-4 border\">{user.name}</td>",
  "                <td className=\"py-2 px-4 border\">{user.username}</td>",
  "                <td className=\"py-2 px-4 border\">{user.email}</td>",
  "                <td className=\"py-2 px-4 border\">{user.address.city}</td>",
  "                <td className=\"py-2 px-4 border\">{user.phone}</td>",
  "                <td className=\"py-2 px-4 border\">{user.website}</td>",
  "                <td className=\"py-2 px-4 border\">{user.company.name}</td>",
  "              </tr>",
  "            ))",
  "          ) : (",
  "            <tr>",
  "              <td colSpan={7} className=\"text-center py-4\">No users found.</td>",
  "            </tr>",
  "          )}",
  "        </tbody>",
  "      </table>",
  "    </div>",
  "  );",
  "};",

  "",
  "export default App;"
],
"description": "req-res-api"
    },

    "rafcart": {
        "prefix": "!_rafcart",
        "body": [
    "// App.tsx",
    "import Header from \"./components/Header\";",
    "import Home from \"./pages/Home\";",
    "",
    "const App = () => (",
    "  <div className=\"min-h-screen bg-gray-50\">",
    "    <Header />",
    "    <Home />",
    "  </div>",
    ");",
    "",
    "export default App;",
    "",
    "// components/Header.tsx",
    "const Header = () => (",
    "  <header className=\"bg-blue-600 text-white py-4 text-center text-2xl font-bold\">",
    "    RafCart",
    "  </header>",
    ");",
    "",
    "export default Header;",
    "",
    "// components/ProductCard.tsx",
    "import { Product } from \"../types\";",
    "",
    "const ProductCard = ({ product }: { product: Product }) => (",
    "  <div className=\"border rounded shadow hover:shadow-lg p-4 text-center\">",
    "    <img src={product.image} alt={product.name} className=\"mx-auto h-32 mb-2\" />",
    "    <h2 className=\"font-semibold\">{product.name}</h2>",
    "    <p className=\"text-gray-500\">${product.price}</p>",
    "    <p className=\"text-sm text-blue-600\">{product.category}</p>",
    "  </div>",
    ");",
    "",
    "export default ProductCard;",
    "",
    "// pages/Home.tsx",
    "import { useEffect, useState } from \"react\";",
    "import ProductCard from \"../components/ProductCard\";",
    "import { Product } from \"../types\";",
    "",
    "const Home = () => {",
    "  const [products, setProducts] = useState<Product[]>([]);",
    "  const [filtered, setFiltered] = useState<Product[]>([]);",
    "  const [category, setCategory] = useState(\"All\");",
    "  const [search, setSearch] = useState(\"\");",
    "",
    "  useEffect(() => {",
    "    fetch(\"/products.json\")",
    "      .then(res => res.json())",
    "      .then(data => {",
    "        setProducts(data);",
    "        setFiltered(data);",
    "      });",
    "  }, []);",
    "",
    "  useEffect(() => {",
    "    let result = products;",
    "",
    "    if (category !== \"All\") {",
    "      result = result.filter(p => p.category === category);",
    "    }",
    "",
    "    if (search) {",
    "      result = result.filter(p =>",
    "        p.name.toLowerCase().includes(search.toLowerCase())",
    "      );",
    "    }",
    "",
    "    setFiltered(result);",
    "  }, [category, search, products]);",
    "",
    "  const uniqueCategories = [\"All\", ...new Set(products.map(p => p.category))];",
    "",
    "  return (",
    "    <div className=\"p-4\">",
    "      {/* Filters */}",
    "      <div className=\"flex flex-col md:flex-row gap-4 mb-6 justify-between items-center\">",
    "        <input",
    "          type=\"text\"",
    "          placeholder=\"Search products...\"",
    "          className=\"border p-2 rounded w-full md:w-1/3\"",
    "          value={search}",
    "          onChange={(e) => setSearch(e.target.value)}",
    "        />",
    "        <select",
    "          value={category}",
    "          onChange={(e) => setCategory(e.target.value)}",
    "          className=\"border p-2 rounded\"",
    "        >",
    "          {uniqueCategories.map((cat, i) => (",
    "            <option key={i} value={cat}>{cat}</option>",
    "          ))}",
    "        </select>",
    "      </div>",
    "",
    "      {/* Product Grid */}",
    "      <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-6\">",
    "        {filtered.map(product => (",
    "          <ProductCard key={product.id} product={product} />",
    "        ))}",
    "      </div>",
    "    </div>",
    "  );",
    "};",
    "",
    "export default Home;",
    "",
    "// types/index.ts",
    "export interface Product {",
    "  id: number;",
    "  name: string;",
    "  price: number;",
    "  category: string;",
    "  image: string;",
    "}",
    "",
    "// public/products.json",
    "[",
    "  {",
    "    \"id\": 1,",
    "    \"name\": \"iPhone 14\",",
    "    \"price\": 999,",
    "    \"category\": \"Electronics\",",
    "    \"image\": \"https://via.placeholder.com/150\"",
    "  },",
    "  {",
    "    \"id\": 2,",
    "    \"name\": \"Dell XPS 13\",",
    "    \"price\": 1299,",
    "    \"category\": \"Computers\",",
    "    \"image\": \"https://via.placeholder.com/150\"",
    "  }",
    "]"
  ],
  "description": "rafcart"
    },
    "counter": {
        "prefix": "!_counter",
        "body": [
  "// App.tsx",
  "import { useState } from 'react';",
  "",
  "function App() {",
  "  const [count, setCount] = useState(0);",
  "",
  "  return (",
  "    <div className=\"h-screen flex items-center justify-center bg-gray-100\">",
  "      <div className=\"bg-white p-8 rounded-2xl shadow-md text-center\">",
  "        <h1 className=\"text-2xl font-bold mb-4\">Simple Counter</h1>",
  "        <p className=\"text-3xl font-semibold mb-6\">{count}</p>",
  "        <div className=\"space-x-4\">",
  "          <button",
  "            onClick={() => setCount(count - 1)}",
  "            className=\"bg-red-500 text-white px-4 py-2 rounded hover:bg-red-600\"",
  "          >",
  "            Decrease",
  "          </button>",
  "          <button",
  "            onClick={() => setCount(0)}",
  "            className=\"bg-gray-500 text-white px-4 py-2 rounded hover:bg-gray-600\"",
  "          >",
  "            Reset",
  "          </button>",
  "          <button",
  "            onClick={() => setCount(count + 1)}",
  "            className=\"bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600\"",
  "          >",
  "            Increase",
  "          </button>",
  "        </div>",
  "      </div>",
  "    </div>",
  "  );",
  "}",
  "",
  "export default App;"
],
"description": "counter"
    }
}