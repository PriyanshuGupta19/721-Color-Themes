{
    "Basic Express Server": {
        "prefix": "!_hiBro",
        "body": [
            "How is it going"
        ],
        "description": "Basic html"
    },
    "##5-mark": {
        "prefix": "##5-mark",
        "body": [
            "//main.jsx",
            "import { StrictMode } from 'react'",
            "import { createRoot } from 'react-dom/client'",
            "import './index.css'",
            "import App from './App.jsx'",
            "import { ThemeProvider } from './ThemeContext';",
            "",
            "createRoot(document.getElementById('root')).render(",
            "  <StrictMode>",
            "  <ThemeProvider>",
            "    <App />",
            "  </ThemeProvider>",
            "</StrictMode>",
            ")",
            "",
            "// App.jsx",
            "import React from 'react';",
            "import { BrowserRouter as Router, Routes, Route, Link } from 'react-router-dom';",
            "import InputComponent from './InputComponent';",
            "import JokeComponent from './JokeComponent';",
            "import { useTheme } from './ThemeContext';",
            "",
            "function Home() {",
            "  return (",
            "    <div className=\"space-y-6\">",
            "      <h2 className=\"text-2xl font-bold\">Home Page</h2>",
            "      <InputComponent />",
            "      <JokeComponent />",
            "    </div>",
            "  );",
            "}",
            "",
            "function About() {",
            "  return <h2 className=\"text-2xl font-bold\">About Page</h2>;",
            "}",
            "",
            "export default function App() {",
            "  const { toggleTheme, theme } = useTheme();",
            "",
            "  return (",
            "    <Router>",
            "      <div className=\"p-4 max-w-3xl mx-auto\">",
            "        <nav className=\"flex items-center justify-between mb-6 border-b pb-4\">",
            "          <div className=\"space-x-4\">",
            "            <Link",
            "              to=\"/home\"",
            "              className=\"text-blue-500 hover:underline font-medium\"",
            "            >",
            "              Home",
            "            </Link>",
            "            <Link",
            "              to=\"/about\"",
            "              className=\"text-blue-500 hover:underline font-medium\"",
            "            >",
            "              About",
            "            </Link>",
            "          </div>",
            "          <button",
            "            onClick={toggleTheme}",
            "            className=\"px-3 py-1 rounded-md bg-blue-600 text-white hover:bg-blue-700 transition\"",
            "          >",
            "            Toggle {theme === 'light' ? 'Dark' : 'Light'}",
            "          </button>",
            "        </nav>",
            "",
            "        <Routes>",
            "          <Route path=\"/home\" element={<Home />} />",
            "          <Route path=\"/about\" element={<About />} />",
            "        </Routes>",
            "      </div>",
            "    </Router>",
            "  );",
            "}",
            "",
            "// JokeComponent.jsx",
            "import React, { useEffect, useState } from 'react';",
            "",
            "export default function JokeComponent() {",
            "  const [joke, setJoke] = useState(null);",
            "",
            "  useEffect(() => {",
            "    fetch('https://official-joke-api.appspot.com/random_joke')",
            "      .then((res) => res.json())",
            "      .then((data) => setJoke(data));",
            "  }, []);",
            "",
            "  return (",
            "    <div>",
            "      <h2>Random Joke</h2>",
            "      {joke ? (",
            "        <p>",
            "          {joke.setup} - {joke.punchline}",
            "        </p>",
            "      ) : (",
            "        <p>Loading...</p>",
            "      )}",
            "    </div>",
            "  );",
            "}",
            "",
            "// ThemeContext.js",
            "import { createContext, useState, useContext } from 'react';",
            "",
            "const ThemeContext = createContext();",
            "",
            "export const useTheme = () => useContext(ThemeContext);",
            "",
            "export function ThemeProvider({ children }) {",
            "  const [theme, setTheme] = useState('light');",
            "  const toggleTheme = () => setTheme((prev) => (prev === 'light' ? 'dark' : 'light'));",
            "",
            "  return (",
            "    <ThemeContext.Provider value={{ theme, toggleTheme }}>",
            "      <div style={{ background: theme === 'dark' ? '#333' : '#fff', color: theme === 'dark' ? '#fff' : '#000', minHeight: '100vh' }}>",
            "        {children}",
            "      </div>",
            "    </ThemeContext.Provider>",
            "  );",
            "}",
            "",
            "// InputComponent.jsx",
            "import React, { useState } from 'react';",
            "",
            "export default function InputComponent() {",
            "  const [input, setInput] = useState('');",
            "",
            "  return (",
            "    <div>",
            "      <input",
            "        type=\"text\"",
            "        placeholder=\"Type something...\"",
            "        value={input}",
            "        onChange={(e) => setInput(e.target.value)}",
            "      />",
            "      <p>You typed: {input}</p>",
            "    </div>",
            "  );",
            "}"
        ],
        "description": "##5-mark"
    },


    "##10-Marks": {
        "prefix": "##10-Marks",
        "body": [
  "// AuthContext.js",
  "import { createContext, useContext, useState } from 'react';",
  "",
  "const AuthContext = createContext();",
  "",
  "export const useAuth = () => useContext(AuthContext);",
  "",
  "export function AuthProvider({ children }) {",
  "  const [isAuthenticated, setIsAuthenticated] = useState(false);",
  "",
  "  const login = () => setIsAuthenticated(true);",
  "  const logout = () => setIsAuthenticated(false);",
  "",
  "  return (",
  "    <AuthContext.Provider value={{ isAuthenticated, login, logout }}>",
  "      {children}",
  "    </AuthContext.Provider>",
  "  );",
  "}",
  "",
  "// Users.jsx",
  "import React, { useEffect, useState } from 'react';",
  "import { Link } from 'react-router-dom';",
  "",
  "export default function Users() {",
  "  const [users, setUsers] = useState([]);",
  "",
  "  useEffect(() => {",
  "    fetch('https://jsonplaceholder.typicode.com/users')",
  "      .then((res) => res.json())",
  "      .then(setUsers);",
  "  }, []);",
  "",
  "  return (",
  "    <div>",
  "      <h2>User List</h2>",
  "      {users.map((user) => (",
  "        <div key={user.id}>",
  "          <Link to={`/users/${user.id}`}>{user.name}</Link>",
  "        </div>",
  "      ))}",
  "    </div>",
  "  );",
  "}",
  "",
  "// UserDetail.jsx",
  "import { useEffect, useState } from 'react';",
  "import { useParams } from 'react-router-dom';",
  "",
  "export default function UserDetail() {",
  "  const { id } = useParams();",
  "  const [user, setUser] = useState(null);",
  "",
  "  useEffect(() => {",
  "    fetch(`https://jsonplaceholder.typicode.com/users/${id}`)",
  "      .then((res) => res.json())",
  "      .then(setUser);",
  "  }, [id]);",
  "",
  "  return user ? <pre>{JSON.stringify(user, null, 2)}</pre> : <p>Loading...</p>;",
  "}",
  "",
  "// MovieSearch.jsx",
  "import { useEffect, useState } from 'react';",
  "",
  "export default function MovieSearch() {",
  "  const [query, setQuery] = useState('');",
  "  const [results, setResults] = useState([]);",
  "",
  "  useEffect(() => {",
  "    const delayDebounce = setTimeout(() => {",
  "      if (query.length > 2) {",
  "        fetch(`https://www.omdbapi.com/?apikey=YOUR_API_KEY&s=${query}`)",
  "          .then((res) => res.json())",
  "          .then((data) => setResults(data.Search || []));",
  "      }",
  "    }, 500);",
  "",
  "    return () => clearTimeout(delayDebounce);",
  "  }, [query]);",
  "",
  "  return (",
  "    <div>",
  "      <input placeholder=\"Search movies...\" onChange={(e) => setQuery(e.target.value)} />",
  "      <ul>",
  "        {results.map((movie) => (",
  "          <li key={movie.imdbID}>{movie.Title}</li>",
  "        ))}",
  "      </ul>",
  "    </div>",
  "  );",
  "}",
  "",
  "// CartContext.js",
  "import { createContext, useContext, useState } from 'react';",
  "",
  "const CartContext = createContext();",
  "export const useCart = () => useContext(CartContext);",
  "",
  "export function CartProvider({ children }) {",
  "  const [cart, setCart] = useState([]);",
  "",
  "  const addProduct = (product) => setCart([...cart, product]);",
  "  const removeProduct = (id) => setCart(cart.filter((p) => p.id !== id));",
  "",
  "  return (",
  "    <CartContext.Provider value={{ cart, addProduct, removeProduct }}>",
  "      {children}",
  "    </CartContext.Provider>",
  "  );",
  "}",
  "",
  "// CartInfo.jsx",
  "import { useCart } from './CartContext';",
  "",
  "export default function CartInfo() {",
  "  const { cart } = useCart();",
  "  return <p>Cart Items: {cart.length}</p>;",
  "}",
  "",
  "// ProtectedRoute.jsx",
  "import { Navigate } from 'react-router-dom';",
  "import { useAuth } from './AuthContext';",
  "",
  "export default function ProtectedRoute({ children }) {",
  "  const { isAuthenticated } = useAuth();",
  "  return isAuthenticated ? children : <Navigate to=\"/login\" />;",
  "}",
  "",
  "// App.jsx",
  "import { BrowserRouter, Routes, Route } from 'react-router-dom';",
  "import { AuthProvider } from './AuthContext';",
  "import ProtectedRoute from './ProtectedRoute';",
  "import Dashboard from './Dashboard';",
  "import Login from './Login';",
  "",
  "function App() {",
  "  return (",
  "    <AuthProvider>",
  "      <BrowserRouter>",
  "        <Routes>",
  "          <Route path=\"/login\" element={<Login />} />",
  "          <Route path=\"/dashboard\" element={<ProtectedRoute><Dashboard /></ProtectedRoute>} />",
  "        </Routes>",
  "      </BrowserRouter>",
  "    </AuthProvider>",
  "  );",
  "}"
],
        "description": "##10-Marks"
    }
}