{
    "Basic Express Server": {
        "prefix": "!_expressserver",
        "body": [
            "const express = require('express');",
    "const app = express();",
    "const port = 3000;",
    "",
    "app.get('/', (req, res) => {",
    "  res.send('Hello, World!');",
    "});",
    "",
    "app.listen(port, () => {",
    "  console.log(`Server running at http://localhost:${port}`);",
    "});"
        ],
        "description": "Basic express server"
    },

    "Dropdown": {
        "prefix": "!_dropdown",
        "body": [
    "// [",
    "//     {",
    "//       \"name\": \"T-Shirt\",",
    "//       \"category\": \"fashion\"",
    "//     },",
    "//     {",
    "//       \"name\": \"Jeans\",",
    "//       \"category\": \"fashion\"",
    "//     },",
    "//     {",
    "//       \"name\": \"Sneakers\",",
    "//       \"category\": \"fashion\"",
    "//     },",
    "//     {",
    "//       \"name\": \"Smartphone\",",
    "//       \"category\": \"electronics\"",
    "//     },",
    "//     {",
    "//       \"name\": \"Headphones\",",
    "//       \"category\": \"electronics\"",
    "//     }",
    "// ]",
    "",
    "// <!DOCTYPE html>",
    "// <html lang=\"en\">",
    "// <head>",
    "//   <meta charset=\"UTF-8\">",
    "//   <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">",
    "//   <title>Product Filter</title>",
    "// </head>",
    "// <body>",
    "//   <label for=\"category\">Choose a category:</label>",
    "//   <select id=\"category\">",
    "//     <option value=\"all\">All</option>",
    "//     <option value=\"fashion\">Fashion</option>",
    "//     <option value=\"electronics\">Electronics</option>",
    "//   </select>",
    "",
    "//   <table border=\"1\">",
    "//     <thead>",
    "//       <tr>",
    "//         <th>Product Name</th>",
    "//         <th>Category</th>",
    "//       </tr>",
    "//     </thead>",
    "//     <tbody id=\"productTable\">",
    "//       <!-- Data will be dynamically injected here -->",
    "//     </tbody>",
    "//   </table>",
    "",
    "//   <script src=\"app.js\"></script>",
    "// </body>",
    "// </html>",
    "",
    "",
    "document.addEventListener('DOMContentLoaded', () => {",
    "    const categoryDropdown = document.getElementById('category');",
    "    const productTable = document.getElementById('productTable');",
    "",
    "    // Fetch the data from the products.json file",
    "    fetch('products.json')",
    "      .then(response => response.json())",
    "      .then(data => {",
    "        // Display all products on initial load",
    "        displayProducts(data);",
    "",
    "        // Listen for dropdown selection change",
    "        categoryDropdown.addEventListener('change', () => {",
    "          const selectedCategory = categoryDropdown.value;",
    "          if (selectedCategory === 'all') {",
    "            displayProducts(data);",
    "          } else {",
    "            const filteredProducts = data.filter(product => product.category === selectedCategory);",
    "            displayProducts(filteredProducts);",
    "          }",
    "        });",
    "      });",
    "",
    "    // Function to display products in the table",
    "    function displayProducts(products) {",
    "      productTable.innerHTML = ''; // Clear previous rows",
    "      products.forEach(product => {",
    "        const row = document.createElement('tr');",
    "        row.innerHTML = `",
    "          <td>${product.name}</td>",
    "          <td>${product.category}</td>",
    "        `;",
    "        productTable.appendChild(row);",
    "      });",
    "    }",
    "  });"
  ],
        "description": "dropdown"
    },

    "Row Color Change": {
        "prefix": "!_rowcolorchangegreen",
        "body": [
    "// [",
    "//   {",
    "//     name: \"John\",",
    "//     country: \"USA\",",
    "//     isselected: false,",
    "//   },",
    "//   {",
    "//     name: \"Alex\",",
    "//     country: \"Canada\",",
    "//     isselected: false,",
    "//   },",
    "//   {",
    "//     name: \"Maria\",",
    "//     country: \"Spain\",",
    "//     isselected: false,",
    "//   },",
    "// ];",
    "",
    "// <!DOCTYPE html>",
    "// <html lang=\"en\">",
    "// <head>",
    "//     <meta charset=\"UTF-8\">",
    "//     <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">",
    "//     <title>Document</title>",
    "//     <style>",
    "//         table{",
    "//             width: 100%;",
    "//             border-collapse: collapse;",
    "//         }",
    "//         th, td {",
    "//             padding: 10px;",
    "//             text-align: left;",
    "//             border: 1px solid black;",
    "//         }",
    "//         tr.selected {",
    "//             background-color: green;",
    "//             color: white;",
    "//         }",
    "//         tr.unselected {",
    "//             background-color: white;",
    "//         }",
    "//     </style>",
    "// </head>",
    "// <body>",
    "//     <h2>Player List</h2>",
    "//     <table id=\"playerTable\">",
    "//         <thead>",
    "//             <tr>",
    "//                 <th>Name</th>",
    "//                 <th>Country</th>",
    "//             </tr>",
    "//             <tbody id=\"playersBody\">",
    "//                 <!-- Player rows will be dynamically inserted here -->",
    "//             </tbody>",
    "//         </thead>",
    "//     </table>",
    "",
    "//     <p id=\"selectedCount\">Selected Player: 0</p>",
    "",
    "//     <script src=\"script.js\"></script>",
    "// </body>",
    "// </html>",
    "",
    "",
    "// Fetch players data from players.json",
    "let players = [];",
    "fetch('players.json')",
    ".then(response => response.json())",
    ".then(data => {",
    "    players = data;",
    "    displayPlayers(players);",
    "});",
    "",
    "// Function to display players in the table",
    "function displayPlayers(players) {",
    "    const playersBody = document.getElementById('playersBody');",
    "    playersBody.innerHTML = ''; // Clear the table body first",
    "",
    "    players.forEach((player, index) => {",
    "        const row = document.createElement('tr');",
    "        row.classList.add(player.isselected ? 'selected' : 'unselected');",
    "",
    "        row.innerHTML = `",
    "        <td>${player.name}</td>",
    "        <td>${player.country}</td>",
    "        `;",
    "",
    "        // Add click event listener for row",
    "        row.addEventListener('click', () => {",
    "            toggleSelection(index);",
    "        });",
    "",
    "        playersBody.appendChild(row);",
    "    });",
    "",
    "    updateSelectedCount();",
    "}",
    "",
    "    // Function to toggle selection of a player",
    "    function toggleSelection(index) {",
    "        players[index].isselected = !players[index].isselected;",
    "        displayPlayers(players); // Update the table display",
    "    }",
    "",
    "    // Function to update the selected players count",
    "    function updateSelectedCount() {",
    "        const selectedCount = players.filter(player => player.isselected).length;",
    "        document.getElementById('selectedCount').innerText = `Selected Players: ${selectedCount}`;",
    "    }"
  ],
        "description": "rowcolorchangegreen"
    },

    "Issued Books": {
        "prefix": "!_issuedbooksred",
        "body": [
    "// [",
    "//     {",
    "//       \"title\": \"The Great Gatsby\",",
    "//       \"author\": \"F. Scott Fitzgerald\",",
    "//       \"year\": 1925,",
    "//       \"issued\": true",
    "//     },",
    "//     {",
    "//       \"title\": \"To Kill a Mockingbird\",",
    "//       \"author\": \"Harper Lee\",",
    "//       \"year\": 1960,",
    "//       \"issued\": false",
    "//     },",
    "//     {",
    "//       \"title\": \"1984\",",
    "//       \"author\": \"George Orwell\",",
    "//       \"year\": 1949,",
    "//       \"issued\": true",
    "//     },",
    "//     {",
    "//       \"title\": \"Pride and Prejudice\",",
    "//       \"author\": \"Jane Austen\",",
    "//       \"year\": 1813,",
    "//       \"issued\": false",
    "//     },",
    "//     {",
    "//       \"title\": \"Moby-Dick\",",
    "//       \"author\": \"Herman Melville\",",
    "//       \"year\": 1851,",
    "//       \"issued\": true",
    "//     }",
    "// ]",
    "",
    "",
    "<!DOCTYPE html>",
    "<html lang=\"en\">",
    "<head>",
    "  <meta charset=\"UTF-8\">",
    "  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">",
    "  <style>",
    "    table {",
    "      width: 100%;",
    "      border-collapse: collapse;",
    "    }",
    "    table, th, td {",
    "      border: 1px solid black;",
    "    }",
    "    th, td {",
    "      padding: 10px;",
    "      text-align: left;",
    "    }",
    "    .issued {",
    "      background-color: red;",
    "      color: white;",
    "    }",
    "  </style>",
    "  <title>Book List</title>",
    "</head>",
    "<body>",
    "",
    "  <table>",
    "    <thead>",
    "      <tr>",
    "        <th>Title</th>",
    "        <th>Author</th>",
    "        <th>Year</th>",
    "        <th>Issued</th>",
    "      </tr>",
    "    </thead>",
    "    <tbody id=\"book-table-body\">",
    "      <!-- Rows will be added here by JavaScript -->",
    "    </tbody>",
    "  </table>",
    "",
    "  <script>",
    "    // Fetch and display books",
    "    fetch('books.json')",
    "      .then(response => response.json())",
    "      .then(data => displayBooks(data))",
    "      .catch(error => console.error('Error fetching the data:', error));",
    "",
    "    // Function to display books in the DOM",
    "    function displayBooks(books) {",
    "      const tableBody = document.getElementById('book-table-body');",
    "      books.forEach(book => {",
    "        const row = document.createElement('tr');",
    "",
    "        if (book.issued) {",
    "          row.classList.add('issued');",
    "        }",
    "",
    "        row.innerHTML = `",
    "          <td>${book.title}</td>",
    "          <td>${book.author}</td>",
    "          <td>${book.year}</td>",
    "          <td>${book.issued ? 'Yes' : 'No'}</td>",
    "        `;",
    "        tableBody.appendChild(row);",
    "      });",
    "    }",
    "  </script>",
    "",
    "</body>",
    "</html>"
  ],
        "description": "issuedbooksred"
    },



    "HTTP Static Files": {
        "prefix": "!_httpstaticfiles",
        "body": [
    "const http = require('http');",
    "const fs = require('fs');",
    "const path = require('path');",
    "",
    "const PORT = 3000;",
    "",
    "// MIME types for serving different file types",
    "const mimeTypes = {",
    "  '.html': 'text/html',",
    "  '.css': 'text/css',",
    "  '.js': 'application/javascript',",
    "  '.png': 'image/png'",
    "};",
    "",
    "// Create HTTP server",
    "const server = http.createServer((req, res) => {",
    "  // Set file path",
    "  let filePath = path.join(__dirname, 'public', req.url === '/' ? 'index.html' : req.url);",
    "",
    "  // Get the file extension",
    "  const extname = path.extname(filePath);",
    "",
    "  // Default to HTML if no extension is found",
    "  const contentType = mimeTypes[extname] || 'text/html';",
    "",
    "  // Read the file and serve it",
    "  fs.readFile(filePath, (err, content) => {",
    "    if (err) {",
    "      if (err.code === 'ENOENT') {",
    "        res.writeHead(404, { 'Content-Type': 'text/html' });",
    "        res.end('<h1>404 - Page Not Found</h1>', 'utf-8');",
    "      } else {",
    "        res.writeHead(500);",
    "        res.end(`Server Error: ${err.code}`);",
    "      }",
    "    } else {",
    "      res.writeHead(200, { 'Content-Type': contentType });",
    "      res.end(content, 'utf-8');",
    "    }",
    "  });",
    "});",
    "",
    "// Listen on port",
    "server.listen(PORT, () => {",
    "  console.log(`Server running at http://localhost:${PORT}/`);",
    "});",
    "",
    "",
    "// /static-site",
    "// ├── server.js",
    "// ├── public",
    "//     ├── index.html",
    "//     ├── style.css",
    "//     ├── script.js",
    "//     ├── image.png",
    "",
    "//     <!DOCTYPE html>",
    "//     <html lang=\"en\">",
    "//     <head>",
    "//       <meta charset=\"UTF-8\">",
    "//       <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">",
    "//       <title>Static Site Example</title>",
    "//       <link rel=\"stylesheet\" href=\"style.css\">",
    "//     </head>",
    "//     <body>",
    "//       <h1>Welcome to My Static Website</h1>",
    "//       <p>This is a basic static HTML website with CSS and JavaScript.</p>",
    "",
    "//       <img src=\"image.png\" alt=\"Example Image\" width=\"200px\">",
    "",
    "//       <button id=\"clickMe\">Click Me</button>",
    "",
    "//       <script src=\"script.js\"></script>",
    "//     </body>",
    "//     </html>",
    "",
    "",
    "",
    "",
    "//     body {",
    "//   font-family: Arial, sans-serif;",
    "//   background-color: #f0f0f0;",
    "//   text-align: center;",
    "//   margin-top: 50px;",
    "// }",
    "",
    "// h1 {",
    "//   color: #333;",
    "// }",
    "",
    "// button {",
    "//   padding: 10px 20px;",
    "//   font-size: 16px;",
    "//   cursor: pointer;",
    "//   background-color: #007bff;",
    "//   color: white;",
    "//   border: none;",
    "//   border-radius: 5px;",
    "// }",
    "",
    "// button:hover {",
    "//   background-color: #0056b3;",
    "// }",
    "",
    "",
    "",
    "// document.getElementById('clickMe').addEventListener('click', function() {",
    "//   alert('Button clicked!');",
    "// });"
  ],
        "description": "httpstaticfiles"
    },


    "Update Task Todo": {
        "prefix": "!_updatetasktodo",
        "body": [
    "const express = require('express');",
    "const bodyParser = require('body-parser');",
    "const fs = require('fs');",
    "const path = require('path');",
    "",
    "const app = express();",
    "const PORT = 3000;",
    "",
    "app.use(bodyParser.urlencoded({ extended: true }));",
    "app.use(express.static('public')); // To serve static files like updateTask.html",
    "",
    "// Task 1: Endpoint to update task",
    "app.post('/updateTask', (req, res) => {",
    "  const taskId = req.body.taskid;",
    "  const newStatus = req.body.status;",
    "",
    "  // Read the todo.json file",
    "  fs.readFile('todo.json', (err, data) => {",
    "    if (err) {",
    "      res.status(500).send('Server Error');",
    "      return;",
    "    }",
    "",
    "    const tasks = JSON.parse(data);",
    "",
    "    // Find the task by ID",
    "    const task = tasks.find(task => task.taskid === taskId);",
    "",
    "    if (task) {",
    "      // Update task status",
    "      task.status = newStatus;",
    "",
    "      // Write back to file",
    "      fs.writeFile('todo.json', JSON.stringify(tasks, null, 2), err => {",
    "        if (err) {",
    "          res.status(500).send('Server Error');",
    "          return;",
    "        }",
    "",
    "        res.send('Task updated successfully.');",
    "      });",
    "    } else {",
    "      res.status(404).send('Task not found.');",
    "    }",
    "  });",
    "});",
    "",
    "// Start the server",
    "app.listen(PORT, () => {",
    "  console.log(`Server running at http://localhost:${PORT}`);",
    "});",
    "",
    "",
    "// <!DOCTYPE html>",
    "// <html lang=\"en\">",
    "// <head>",
    "//   <meta charset=\"UTF-8\">",
    "//   <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">",
    "//   <title>Update Task</title>",
    "// </head>",
    "// <body>",
    "//   <h1>Update Task Status</h1>",
    "//   <form action=\"/updateTask\" method=\"POST\">",
    "//     <label for=\"taskid\">Task ID:</label>",
    "//     <input type=\"text\" id=\"taskid\" name=\"taskid\" required>",
    "//     <br><br>",
    "//     <label for=\"status\">Status:</label>",
    "//     <input type=\"text\" id=\"status\" name=\"status\" required>",
    "//     <br><br>",
    "//     <button type=\"submit\">Update Task</button>",
    "//   </form>",
    "// </body>",
    "// </html>",
    "",
    "",
    "",
    "// [",
    "//   {",
    "//     \"taskid\": \"1\",",
    "//     \"name\": \"Complete shopping filter\",",
    "//     \"status\": \"incomplete\"",
    "//   },",
    "//   {",
    "//     \"taskid\": \"2\",",
    "//     \"name\": \"Update server endpoint\",",
    "//     \"status\": \"incomplete\"",
    "//   },",
    "//   {",
    "//     \"taskid\": \"3\",",
    "//     \"name\": \"Refactor task manager\",",
    "//     \"status\": \"complete\"",
    "//   }",
    "// ]"
  ],
        "description": "updatatasktodo"
    },



    "File Upload Using Multer": {
        "prefix": "!_fileuploadmulter",
        "body": [
  "const express = require('express');",
  "const multer = require('multer');",
  "const path = require('path');",
  "",
  "// Create an Express app",
  "const app = express();",
  "",
  "// Set the folder where uploaded files will be stored",
  "const uploadFolder = path.join(__dirname, 'uploads');",
  "",
  "// Configure multer for file upload",
  "const storage = multer.diskStorage({",
  "    destination: (req, file, cb) => {",
  "        cb(null, uploadFolder); // Save files in the uploads folder",
  "    },",
  "    filename: (req, file, cb) => {",
  "        cb(null, Date.now() + path.extname(file.originalname)); // Save files with a timestamp",
  "    }",
  "});",
  "",
  "const upload = multer({ storage: storage });",
  "",
  "// Serve static files from the public folder (for serving the HTML page)",
  "app.use(express.static('public'));",
  "",
  "// Task: Handle file upload",
  "app.post('/upload', upload.single('myfile'), (req, res) => {",
  "    if (!req.file) {",
  "        return res.status(400).json({ success: false, message: 'No file uploaded' });",
  "    }",
  "",
  "    res.json({ success: true, message: 'File uploaded successfully!' });",
  "});",
  "",
  "// Start the server",
  "const PORT = 3000;",
  "app.listen(PORT, () => {",
  "    console.log(`Server is running on http://localhost:${PORT}`);",
  "});",
  "",
  "",
  "",
  "// /FileUploadApp",
  "// │",
  "// ├── /uploads               // The uploaded files will be saved here",
  "// │",
  "// ├── /public",
  "// │   └── index.html         // The HTML file with the upload form",
  "// │",
  "// ├── server.js              // The Express server file",
  "// ├── package.json           // Project configuration file",
  "",
  "",
  "",
  "",
  "// <!DOCTYPE html>",
  "// <html lang=\"en\">",
  "// <head>",
  "//     <meta charset=\"UTF-8\">",
  "//     <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">",
  "//     <title>File Upload</title>",
  "// </head>",
  "// <body>",
  "//     <h1>Upload a File</h1>",
  "",
  "//     <form id=\"uploadForm\" enctype=\"multipart/form-data\">",
  "//         <input type=\"file\" name=\"myfile\" id=\"myfile\" />",
  "//         <button type=\"submit\">Upload</button>",
  "//     </form>",
  "",
  "//     <script>",
  "//         document.getElementById('uploadForm').addEventListener('submit', function (event) {",
  "//             event.preventDefault(); // Prevent the default form submission",
  "",
  "//             const formData = new FormData();",
  "//             const fileInput = document.getElementById('myfile');",
  "",
  "//             if (fileInput.files.length === 0) {",
  "//                 alert(\"Please select a file to upload!\");",
  "//                 return;",
  "//             }",
  "",
  "//             formData.append('myfile', fileInput.files[0]);",
  "",
  "//             fetch('/upload', {",
  "//                 method: 'POST',",
  "//                 body: formData,",
  "//             })",
  "//             .then(response => response.json())",
  "//             .then(result => {",
  "//                 if (result.success) {",
  "//                     alert(\"File uploaded successfully!\");",
  "//                 } else {",
  "//                     alert(\"Failed to upload file.\");",
  "//                 }",
  "//             })",
  "//             .catch(error => {",
  "//                 console.error('Error:', error);",
  "//                 alert(\"An error occurred while uploading the file.\");",
  "//             });",
  "//         });",
  "//     </script>",
  "// </body>",
  "// </html>"
],
        "description": "!_fileuploadmulter"
    },


    "Todo Uncompleted Tasks": {
        "prefix": "!_todouncompleted",
        "body": [
  "const express = require('express');",
  "const fs = require('fs');",
  "const app = express();",
  "const path = require('path');",
  "const PORT = 3000;",
  "",
  "// Serve static files (like HTML, JS, CSS) from the public folder",
  "app.use(express.static('public'));",
  "",
  "// Task 1: Serve the index.html at the root route \"/\"",
  "app.get('/', (req, res) => {",
  "    res.sendFile(path.join(__dirname, 'public', 'index.html'));",
  "});",
  "",
  "// Task 3: Create /GetTodo endpoint to return pending tasks",
  "app.get('/GetTodo', (req, res) => {",
  "    fs.readFile('todo.json', (err, data) => {",
  "        if (err) {",
  "            return res.status(500).json({ success: false, message: 'Server Error' });",
  "        }",
  "",
  "        // Parse the todo data",
  "        const todos = JSON.parse(data);",
  "",
  "        // Filter the tasks that are not completed (isCompleted is false)",
  "        const pendingTasks = todos.filter(task => !task.isCompleted);",
  "",
  "        // Send the filtered tasks back as a response",
  "        res.json(pendingTasks);",
  "    });",
  "});",
  "",
  "// Start the server",
  "app.listen(PORT, () => {",
  "    console.log(`Server running at http://localhost:${PORT}`);",
  "});",
  "",
  "",
  "// /TodoApp",
  "// │",
  "// ├── /public",
  "// │   └── index.html         // The HTML file that lists pending tasks",
  "// │",
  "// ├── todo.json              // The file containing task data",
  "// ├── server.js              // Express server handling requests and serving the site",
  "// ├── package.json           // Node.js project configuration",
  "",
  "",
  "// <!DOCTYPE html>",
  "// <html lang=\"en\">",
  "// <head>",
  "//     <meta charset=\"UTF-8\">",
  "//     <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">",
  "//     <title>Pending Tasks</title>",
  "// </head>",
  "// <body>",
  "//     <h1>Pending Tasks</h1>",
  "",
  "//     <button id=\"getTasksBtn\">Get Pending Tasks</button>",
  "//     <ul id=\"taskList\"></ul>",
  "",
  "//     <script>",
  "//         // Get the pending tasks when the button is clicked",
  "//         document.getElementById('getTasksBtn').addEventListener('click', () => {",
  "//             fetch('/GetTodo')",
  "//                 .then(response => response.json())",
  "//                 .then(tasks => {",
  "//                     const taskList = document.getElementById('taskList');",
  "//                     taskList.innerHTML = ''; // Clear previous list",
  "",
  "//                     tasks.forEach(task => {",
  "//                         const li = document.createElement('li');",
  "//                         li.textContent = `${task.name} (ID: ${task.id})`;",
  "//                         taskList.appendChild(li);",
  "//                     });",
  "//                 })",
  "//                 .catch(err => console.error('Error fetching tasks:', err));",
  "//         });",
  "//     </script>",
  "// </body>",
  "// </html>",
  "",
  "",
  "// [",
  "//     { \"id\": 1, \"name\": \"Buy groceries\", \"isCompleted\": false },",
  "//     { \"id\": 2, \"name\": \"Complete project\", \"isCompleted\": true },",
  "//     { \"id\": 3, \"name\": \"Read book\", \"isCompleted\": false }",
  "// ]"
],
        "description": "todouncompleted"
    },



    "Filter Prod By Category": {
        "prefix": "!_filterprodbycategory",
        "body": [
  "const express = require('express');",
  "const fs = require('fs');",
  "const app = express();",
  "const PORT = 3000;",
  "",
  "app.use(express.json());",
  "app.use(express.urlencoded({ extended: true }));",
  "",
  "// Serve static files like the HTML page",
  "app.use(express.static('public'));",
  "",
  "app.get('/', (req, res) => {",
  "    res.sendFile(__dirname + '/public/index.html');",
  "});",
  "",
  "app.get('/GetProducts', (req, res) => {",
  "    const category = req.query.category;",
  "",
  "    fs.readFile('products.json', (err, data) => {",
  "        if (err) {",
  "            return res.status(500).json({ success: false, message: 'Server Error' });",
  "        }",
  "",
  "        const products = JSON.parse(data);",
  "        const filteredProducts = products.filter(p => p.product_category === category);",
  "        res.json(filteredProducts);",
  "    });",
  "});",
  "",
  "// Start the server",
  "app.listen(PORT, () => {",
  "    console.log(`Server running at http://localhost:${PORT}`);",
  "});",
  "",
  "",
  "",
  "",
  "// ├── server.js",
  "// ├── public",
  "// │   └── index.html",
  "// ├── products.json",
  "",
  "",
  "",
  "// <!DOCTYPE html>",
  "// <html lang=\"en\">",
  "// <head>",
  "//     <meta charset=\"UTF-8\">",
  "//     <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">",
  "//     <title>Product Filter</title>",
  "// </head>",
  "// <body>",
  "//     <h1>Select Product Category</h1>",
  "//     <select id=\"categorySelect\">",
  "//         <option value=\"Electronics\">Electronics</option>",
  "//         <option value=\"Computers\">Computers</option>",
  "//     </select>",
  "//     <br><br>",
  "//     <button id=\"filterBtn\">Get Products</button>",
  "",
  "//     <h2>Products:</h2>",
  "//     <ul id=\"productList\"></ul>",
  "",
  "//     <script>",
  "//         document.getElementById('filterBtn').addEventListener('click', () => {",
  "//             const category = document.getElementById('categorySelect').value;",
  "",
  "//             // Send request to /GetProducts endpoint",
  "//             fetch(`/GetProducts?category=${category}`)",
  "//                 .then(response => response.json())",
  "//                 .then(data => {",
  "//                     const productList = document.getElementById('productList');",
  "//                     productList.innerHTML = '';",
  "//                     data.forEach(product => {",
  "//                         const li = document.createElement('li');",
  "//                         li.textContent = `${product.product_name} (ID: ${product.product_id})`;",
  "//                         productList.appendChild(li);",
  "//                     });",
  "//                 });",
  "//         });",
  "//     </script>",
  "// </body>",
  "// </html>",
  "",
  "",
  "// [",
  "//     { \"product_id\": 1, \"product_category\": \"Electronics\", \"product_name\": \"Smartphone\" },",
  "//     { \"product_id\": 2, \"product_category\": \"Electronics\", \"product_name\": \"Laptop\" },",
  "//     { \"product_id\": 3, \"product_category\": \"Computers\", \"product_name\": \"Desktop PC\" },",
  "//     { \"product_id\": 4, \"product_category\": \"Computers\", \"product_name\": \"Monitor\" }",
  "// ]"
],
        "description": "filterprodbycategory"
    },



    "Ajax Login": {
        "prefix": "!_ajaxlogin",
        "body": [
  "const express = require('express');",
  "const fs = require('fs');",
  "const app = express();",
  "const PORT = 3000;",
  "",
  "// Middleware to parse JSON bodies",
  "app.use(express.json());",
  "app.use(express.urlencoded({ extended: true }));",
  "",
  "// Serve static files (login.html)",
  "app.use(express.static('public'));",
  "",
  "// Task 3: Display Login Page at \"/\" route",
  "app.get('/', (req, res) => {",
  "    res.sendFile(__dirname + '/public/login.html');",
  "});",
  "",
  "// Task 5: Create Login endpoint",
  "app.post('/login', (req, res) => {",
  "    const { username, password } = req.body;",
  "",
  "    fs.readFile('users.json', (err, data) => {",
  "        if (err) {",
  "            return res.status(500).json({ success: false, message: 'Server error' });",
  "        }",
  "",
  "        const users = JSON.parse(data);",
  "",
  "        // Task 6: Check if user exists",
  "        const user = users.find(u => u.username === username && u.password === password);",
  "        if (user) {",
  "            return res.json({ success: true });",
  "        } else {",
  "            return res.json({ success: false });",
  "        }",
  "    });",
  "});",
  "",
  "// Start the server",
  "app.listen(PORT, () => {",
  "    console.log(`Server running at http://localhost:${PORT}`);",
  "});",
  "",
  "",
  "",
  "",
  "// /login-app",
  "// ├── server.js",
  "// ├── public",
  "// │   └── login.html",
  "// ├── users.json",
  "",
  "",
  "",
  "",
  "// <!DOCTYPE html>",
  "// <html lang=\"en\">",
  "// <head>",
  "//     <meta charset=\"UTF-8\">",
  "//     <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">",
  "//     <title>Login</title>",
  "// </head>",
  "// <body>",
  "//     <h1>Login Page</h1>",
  "//     <label for=\"username\">Username:</label>",
  "//     <input type=\"text\" id=\"username\" required>",
  "//     <br><br>",
  "//     <label for=\"password\">Password:</label>",
  "//     <input type=\"password\" id=\"password\" required>",
  "//     <br><br>",
  "//     <button id=\"loginBtn\">Login</button>",
  "",
  "//     <script>",
  "//         document.getElementById('loginBtn').addEventListener('click', () => {",
  "//             const username = document.getElementById('username').value;",
  "//             const password = document.getElementById('password').value;",
  "",
  "//             // Task 4: Send AJAX request to /login",
  "//             fetch('/login', {",
  "//                 method: 'POST',",
  "//                 headers: {",
  "//                     'Content-Type': 'application/json',",
  "//                 },",
  "//                 body: JSON.stringify({ username, password }),",
  "//             })",
  "//             .then(response => response.json())",
  "//             .then(data => {",
  "//                 // Task 7: Display alert based on response",
  "//                 if (data.success) {",
  "//                     alert('Login successful!');",
  "//                 } else {",
  "//                     alert('Invalid credentials, please try again.');",
  "//                 }",
  "//             })",
  "//             .catch(error => {",
  "//                 console.error('Error:', error);",
  "//                 alert('An error occurred. Please try again later.');",
  "//             });",
  "//         });",
  "//     </script>",
  "// </body>",
  "// </html>",
  "",
  "",
  "// [",
  "//     { \"username\": \"john\", \"password\": \"123456\" },",
  "//     { \"username\": \"jane\", \"password\": \"password\" }",
  "// ]"
],
        "description": "ajaxlogin"
    },



    "Ajax SignUp Multer": {
        "prefix": "!_ajaxsignupmulter",
        "body": [
  "const express = require('express');",
  "const fs = require('fs');",
  "const multer = require('multer');",
  "const path = require('path');",
  "",
  "const app = express();",
  "const PORT = 3000;",
  "",
  "// Set up Multer for file uploads",
  "const upload = multer({ dest: 'uploads/' });",
  "",
  "// Serve static files like signup.html",
  "app.use(express.static('public'));",
  "",
  "// Root route to redirect to signup.html",
  "app.get('/', (req, res) => {",
  "    res.redirect('/signup.html');",
  "});",
  "",
  "// Handle signup with image upload",
  "app.post('/signup', upload.single('image'), (req, res) => {",
  "    const { username, password } = req.body;",
  "",
  "    fs.readFile('users.json', (err, data) => {",
  "        if (err) {",
  "            return res.status(500).json({ success: false, message: 'Server Error' });",
  "        }",
  "",
  "        let users = JSON.parse(data);",
  "",
  "        // Check if the username exists",
  "        const existingUser = users.find(user => user.username === username);",
  "        if (existingUser) {",
  "            return res.status(400).json({ success: false, message: 'Username already exists' });",
  "        }",
  "",
  "        // Create new user",
  "        const newUser = { username, password, image: req.file.filename };",
  "        users.push(newUser);",
  "",
  "        fs.writeFile('users.json', JSON.stringify(users, null, 2), (err) => {",
  "            if (err) {",
  "                return res.status(500).json({ success: false, message: 'Failed to create user' });",
  "            }",
  "            res.json({ success: true });",
  "        });",
  "    });",
  "});",
  "",
  "// Start server",
  "app.listen(PORT, () => {",
  "    console.log(`Server is running at http://localhost:${PORT}`);",
  "});",
  "",
  "",
  "",
  "",
  "// /signup",
  "// ├── server.js",
  "// ├── public",
  "// │   ├── signup.html",
  "// ├── users.json",
  "// ├── uploads (created by Multer)",
  "",
  "",
  "// <!DOCTYPE html>",
  "// <html lang=\"en\">",
  "// <head>",
  "//     <meta charset=\"UTF-8\">",
  "//     <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">",
  "//     <title>Signup</title>",
  "// </head>",
  "// <body>",
  "//     <h1>Signup Page</h1>",
  "//     <label for=\"username\">Username:</label>",
  "//     <input type=\"text\" id=\"username\" required>",
  "//     <br><br>",
  "//     <label for=\"password\">Password:</label>",
  "//     <input type=\"password\" id=\"password\" required>",
  "//     <br><br>",
  "//     <label for=\"image\">Upload Image:</label>",
  "//     <input type=\"file\" id=\"image\" accept=\"image/*\">",
  "//     <br><br>",
  "//     <button id=\"signupBtn\">Signup</button>",
  "",
  "//     <script>",
  "//         document.getElementById('signupBtn').addEventListener('click', () => {",
  "//             const username = document.getElementById('username').value;",
  "//             const password = document.getElementById('password').value;",
  "//             const image = document.getElementById('image').files[0];",
  "",
  "//             const formData = new FormData();",
  "//             formData.append('username', username);",
  "//             formData.append('password', password);",
  "//             formData.append('image', image);",
  "",
  "//             // AJAX request to Signup endpoint",
  "//             fetch('/signup', {",
  "//                 method: 'POST',",
  "//                 body: formData,",
  "//             })",
  "//             .then(response => response.json())",
  "//             .then(data => {",
  "//                 if (data.success) {",
  "//                     alert('Signup successful!');",
  "//                 } else {",
  "//                     alert('Signup failed: ' + data.message);",
  "//                 }",
  "//             })",
  "//             .catch(error => {",
  "//                 console.error('Error:', error);",
  "//                 alert('An error occurred.');",
  "//             });",
  "//         });",
  "//     </script>",
  "// </body>",
  "// </html>"
],
        "description": "ajaxsignupmulter"
    },



    "Login SignUp Session": {
        "prefix": "!_loginsignupsession",
        "body": [
  "const express = require('express');",
  "const session = require('express-session');",
  "const bodyParser = require('body-parser');",
  "const path = require('path');",
  "const app = express();",
  "",
  "// Middleware for parsing request bodies",
  "app.use(bodyParser.urlencoded({ extended: true }));",
  "",
  "// Session management",
  "app.use(session({",
  "  secret: 'your-secret-key',",
  "  resave: false,",
  "  saveUninitialized: true,",
  "  cookie: { secure: false }  // set secure: true for HTTPS",
  "}));",
  "",
  "// Dummy user data (replace with a real database in production)",
  "let users = {};",
  "",
  "// Serve static files (HTML, CSS, JS)",
  "app.use(express.static(path.join(__dirname, 'views')));",
  "",
  "// Signup route",
  "app.post('/signup', (req, res) => {",
  "  const { username, password } = req.body;",
  "",
  "  if (users[username]) {",
  "    return res.send('User already exists. Please log in.');",
  "  }",
  "  ",
  "  // Register the user",
  "  users[username] = { password };",
  "  req.session.username = username;",
  "  res.redirect('/dashboard');",
  "});",
  "",
  "// Login route",
  "app.post('/login', (req, res) => {",
  "  const { username, password } = req.body;",
  "",
  "  if (!users[username] || users[username].password !== password) {",
  "    return res.send('Invalid username or password');",
  "  }",
  "",
  "  // Set session and redirect to the dashboard",
  "  req.session.username = username;",
  "  res.redirect('/dashboard');",
  "});",
  "",
  "// Dashboard route (protected)",
  "app.get('/dashboard', (req, res) => {",
  "  if (!req.session.username) {",
  "    return res.redirect('/login.html'); // Redirect to login if not logged in",
  "  }",
  "  ",
  "  res.sendFile(path.join(__dirname, 'views', 'dashboard.html'));",
  "});",
  "",
  "// Logout route",
  "app.get('/logout', (req, res) => {",
  "  req.session.destroy(); // Destroy the session",
  "  res.redirect('/login.html');",
  "});",
  "",
  "// Start the server",
  "app.listen(3000, () => {",
  "  console.log('Server running on port 3000');",
  "});",
  "",
  "",
  "",
  "",
  "// - views/",
  "//   - signup.html",
  "//   - login.html",
  "//   - dashboard.html",
  "// - app.js",
  "",
  "",
  "",
  "// <!DOCTYPE html>",
  "// <html lang=\"en\">",
  "// <head>",
  "//   <meta charset=\"UTF-8\">",
  "//   <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">",
  "//   <title>Signup</title>",
  "// </head>",
  "// <body>",
  "//   <h1>Signup</h1>",
  "//   <form action=\"/signup\" method=\"POST\">",
  "//     <label for=\"username\">Username:</label>",
  "//     <input type=\"text\" id=\"username\" name=\"username\" required>",
  "//     <br>",
  "//     <label for=\"password\">Password:</label>",
  "//     <input type=\"password\" id=\"password\" name=\"password\" required>",
  "//     <br>",
  "//     <button type=\"submit\">Signup</button>",
  "//   </form>",
  "//   <a href=\"/login.html\">Already have an account? Login here</a>",
  "// </body>",
  "// </html>",
  "",
  "",
  "// <!DOCTYPE html>",
  "// <html lang=\"en\">",
  "// <head>",
  "//   <meta charset=\"UTF-8\">",
  "//   <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">",
  "//   <title>Login</title>",
  "// </head>",
  "// <body>",
  "//   <h1>Login</h1>",
  "//   <form action=\"/login\" method=\"POST\">",
  "//     <label for=\"username\">Username:</label>",
  "//     <input type=\"text\" id=\"username\" name=\"username\" required>",
  "//     <br>",
  "//     <label for=\"password\">Password:</label>",
  "//     <input type=\"password\" id=\"password\" name=\"password\" required>",
  "//     <br>",
  "//     <button type=\"submit\">Login</button>",
  "//   </form>",
  "//   <a href=\"/signup.html\">Don't have an account? Signup here</a>",
  "// </body>",
  "// </html>",
  "",
  "",
  "",
  "// <!DOCTYPE html>",
  "// <html lang=\"en\">",
  "// <head>",
  "//   <meta charset=\"UTF-8\">",
  "//   <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">",
  "//   <title>Dashboard</title>",
  "// </head>",
  "// <body>",
  "//   <h1>Welcome to your Dashboard!</h1>",
  "//   <p>This is a protected route that can only be accessed when logged in.</p>",
  "//   <a href=\"/logout\">Logout</a>",
  "// </body>",
  "// </html>"
],
        "description": "loginsignupsession"
    },




    "Ecommerce": {
        "prefix": "!_ecommerce",
        "body": [
    "// app.js",
    "const express = require('express');",
    "const fs = require('fs');",
    "const path = require('path');",
    "",
    "const app = express();",
    "",
    "// Middleware",
    "app.use(express.json());",
    "app.use(express.urlencoded({ extended: true }));",
    "app.use(express.static('public'));  // Serve static files",
    "",
    "// Set EJS as the template engine",
    "app.set('view engine', 'ejs');",
    "",
    "// Route: Home ('/')",
    "app.get('/', (req, res) => {",
    "    const products = JSON.parse(fs.readFileSync('./data/products.json', 'utf-8'));",
    "    res.render('home', { products });",
    "});",
    "",
    "// Route: Add to Cart (simple local session-based)",
    "let cart = [];",
    "app.post('/cart', (req, res) => {",
    "    const { productId, quantity } = req.body;",
    "    const products = JSON.parse(fs.readFileSync('./data/products.json', 'utf-8'));",
    "    const product = products.find(p => p.id === productId);",
    "    ",
    "    if (product) {",
    "        const existingProduct = cart.find(p => p.productId === productId);",
    "        if (existingProduct) {",
    "            existingProduct.quantity += parseInt(quantity);",
    "        } else {",
    "            cart.push({ productId, quantity: parseInt(quantity), name: product.name, price: product.price });",
    "        }",
    "    }",
    "    ",
    "    res.redirect('/cart');",
    "});",
    "",
    "// Route: View Cart",
    "app.get('/cart', (req, res) => {",
    "    res.render('cart', { cart });",
    "});",
    "",
    "// Route: Dashboard (simple mock data)",
    "app.get('/dashboard', (req, res) => {",
    "    const orders = JSON.parse(fs.readFileSync('./data/orders.json', 'utf-8'));",
    "    res.render('dashboard', { orders });",
    "});",
    "",
    "// Start Server",
    "app.listen(3000, () => {",
    "    console.log('Server running on http://localhost:3000');",
    "});",
    "",
    "// npm install express ejs mongoose bcryptjs express-session connect-mongo dotenv",
    "",
    "// File structure",
    "// /EcommerceApp",
    "// │",
    "// ├── /public                  // Static resources (CSS, JS, images)",
    "// │   └── /css                 // Stylesheets",
    "// │",
    "// ├── /views                   // EJS templates",
    "// │   ├── home.ejs             // Home page (listing products)",
    "// │   ├── cart.ejs             // Cart page",
    "// │   └── dashboard.ejs        // User dashboard (order history)",
    "// │",
    "// ├── /data                    // JSON files for data storage (no DB needed)",
    "// │   ├── products.json        // Product list",
    "// │   ├── users.json           // User list",
    "// │   └── orders.json          // Order history",
    "// │",
    "// ├── app.js                   // Main Express server file",
    "// ├── package.json             // Project configuration",
    "// └── .env                     // Environment variables (DB/other configs)",
    "",
    "",
    "// Products.json",
    "[",
    "    { \"id\": \"1\", \"name\": \"Laptop\", \"price\": 1000, \"category\": \"Computers\" },",
    "    { \"id\": \"2\", \"name\": \"Mouse\", \"price\": 25, \"category\": \"Computers\" },",
    "    { \"id\": \"3\", \"name\": \"Smartphone\", \"price\": 700, \"category\": \"Electronics\" },",
    "    { \"id\": \"4\", \"name\": \"Headphones\", \"price\": 150, \"category\": \"Electronics\" }",
    "]",
    "",
    "",
    "//orders.json",
    "[",
    "    { \"id\": \"123\", \"userId\": \"1\", \"totalPrice\": 1125, \"status\": \"Pending\", \"date\": \"2024-10-19\" }",
    "]",
    "",
    "",
    "// views/home.ejs",
    "",
    "<!DOCTYPE html>",
    "<html lang=\"en\">",
    "<head>",
    "    <meta charset=\"UTF-8\">",
    "    <title>Home</title>",
    "    <link rel=\"stylesheet\" href=\"/css/styles.css\">",
    "</head>",
    "<body>",
    "    <h1>Products</h1>",
    "    <ul>",
    "        <% products.forEach(product => { %>",
    "            <li>",
    "                <%= product.name %> - $<%= product.price %>",
    "                <form action=\"/cart\" method=\"POST\">",
    "                    <input type=\"hidden\" name=\"productId\" value=\"<%= product.id %>\">",
    "                    <input type=\"number\" name=\"quantity\" value=\"1\" min=\"1\">",
    "                    <button type=\"submit\">Add to Cart</button>",
    "                </form>",
    "            </li>",
    "        <% }) %>",
    "    </ul>",
    "</body>",
    "</html>",
    "",
    "",
    "// views/cart.ejs",
    "",
    "<!DOCTYPE html>",
    "<html lang=\"en\">",
    "<head>",
    "    <meta charset=\"UTF-8\">",
    "    <title>Cart</title>",
    "</head>",
    "<body>",
    "    <h1>Your Cart</h1>",
    "    <ul>",
    "        <% cart.forEach(item => { %>",
    "            <li><%= item.name %> - Quantity: <%= item.quantity %> - Price: $<%= item.price * item.quantity %></li>",
    "        <% }) %>",
    "    </ul>",
    "    <a href=\"/\">Continue Shopping</a>",
    "</body>",
    "</html>",
    "",
    "",
    "// views/dashboard.ejs",
    "",
    "<!DOCTYPE html>",
    "<html lang=\"en\">",
    "<head>",
    "    <meta charset=\"UTF-8\">",
    "    <title>Dashboard</title>",
    "</head>",
    "<body>",
    "    <h1>Order History</h1>",
    "    <ul>",
    "        <% orders.forEach(order => { %>",
    "            <li>",
    "                Order ID: <%= order.id %> - Total: $<%= order.totalPrice %> - Status: <%= order.status %> - Date: <%= order.date %>",
    "            </li>",
    "        <% }) %>",
    "    </ul>",
    "</body>",
    "</html>"
],
        "description": "ecommerce"
    },


    "Basic HTTP Server": {
        "prefix": "",
        "body": [
            
        ],
        "description": ""
    },



    "Multer": {
        "prefix": "!multer",
        "body": [
    "const multer = require('multer');",
    "",
    "const storage = multer.diskStorage({",
    "    destination: (req, file, cb) => {",
    "        cb(null, './uploads');",
    "    },",
    "    filename: (req, file, cb) => {",
    "        cb(null, file.originalname);",
    "    }",
    "});",
    "",
    "const upload = multer({ storage: storage });"
],
        "description": "multer"
    },
    "Session": {
        "prefix": "!session",
        "body": [
    "const session = require('express-session');",
    "",
    "app.use(session({",
    "    resave: false,",
    "    saveUninitialized: false,",
    "    secret: 'secret',",
    "    // cookie: { maxAge: 30 * 60 * 1000 } // adds age to the session",
    "}));"
],
        "description": "session"
    },
    "Mongoose": {
        "prefix": "!mongoose",
        "body":[
"const mongoose = require('mongoose');",
"",
"mongoose.connect(url, { useNewUrlParser: true, useUnifiedTopology: true });"
],
        "description": "mongoose"
    },
    

    "Nikhil Multer": {
        "prefix": "!n_multer",
        "body": [
  "const express = require('express');",
  "const multer = require('multer');",
  "const path = require('path');",
  "const app = express();",
  "const PORT = 7000;",
  "",
  "const storage = multer.diskStorage({",
  "  destination: function (req, file, cb) {",
  "    cb(null, 'uploads/');",
  "  },",
  "  filename: function (req, file, cb) {",
  "    cb(null, `${Date.now()}-${file.originalname}`);",
  "  }",
  "});",
  "",
  "const upload = multer({ storage: storage });",
  "",
  "app.use('/uploads', express.static(path.join(__dirname, 'uploads')));",
  "",
  "app.get('/', (req, res) => {",
  "  res.sendFile(path.join(__dirname, 'index.html'));",
  "});",
  "",
  "app.post('/upload', upload.array('images', 10), (req, res) => {",
  "  if (!req.files || req.files.length === 0) {",
  "    return res.status(400).send('No files uploaded.');",
  "  }",
  "  res.send(`Files uploaded successfully `);",
  "});",
  "",
  "app.listen(PORT, () => {",
  "  console.log(`Server is running on http://localhost:${PORT}`);",
  "});",
  "",
  "/* <h1>Upload Images</h1>",
  "<form id=\"uploadForm\" enctype=\"multipart/form-data\">",
  "    <input type=\"file\" name=\"images\" accept=\"image/*\" multiple>",
  "    <button type=\"submit\">Upload</button>",
  "</form>",
  "<div id=\"result\"></div>",
  "<script>",
  "    document.getElementById('uploadForm').addEventListener('submit', function(e) {",
  "        e.preventDefault();",
  "        const formData = new FormData(this);",
  "        fetch('/upload', {",
  "            method: 'POST',",
  "            body: formData,",
  "        })",
  "        .then(response => response.text())",
  "        .then(data => {",
  "            document.getElementById('result').innerHTML = data;",
  "        })",
  "        .catch(error => {",
  "            console.error('Error:', error);",
  "        });",
  "    });",
  "</script> */"
],
        "description": "multer_n"
    },


    "Nikhil MongoDB": {
        "prefix": "!n_mongodb",
        "body": [
    "app.use(session({",
    "    secret: 'Kucbhilikhdo',",
    "    resave: false,",
    "    saveUninitialized: true",
    "}));",
    "",
    "const uri = \"mongodb+srv://gulerianikhil69:akshat@cluster0.kegbr.mongodb.net/test\";",
    "",
    "async function connectDB() {",
    "    try {",
    "        const client = new MongoClient(uri, { useNewUrlParser: true, useUnifiedTopology: true });",
    "        await client.connect();",
    "        console.log('Successfully connected to db');",
    "        const db = client.db();",
    "        const usersCollection = db.collection('users');",
    "        return { client, usersCollection };",
    "    } catch (err) {",
    "        console.log('Error connecting to db : ', err);",
    "    }",
    "}",
    "",
    "connectDB();",
    "",
    "function isAuthenticated(req, res, next) {",
    "    if (req.session.user) {",
    "        return next();",
    "    }",
    "    res.redirect('/login');",
    "}"
],
        "description": "n_mongodb"
    },
}

